---
title: "Introduction to Hierarchical Generalized Additive Models"
description: |
  This course is designed to demystify hierarchical modelling as powerful tools to model population dynamics, spatial distributions, and any non-linear relationships in your ecological data. The training will be divided into two blocks. First, we will cover hierarchies in biology, data, and in models to understand what hierarchical models are, some of the forms they can take, and the fundamentals of how they work. Second, we will introduce latent variable modelling as a way to explain even more of the variation in our response variables, to better disentangle the hierarchies of variation in our data. Both blocks will include a theoretical presentation followed by hands-on coding exercises to implement and interpret hierarchical GAMs.
author:
  - name: "Camille Lévesque"
    affiliation: Université de Sherbrooke
  - name: "Katherine Hébert"
    affiliation: McGill University
categories: [Technical, EN]
date: "03-03-2025"
image: image.jpg
toc: true
number-sections: true
number-depth: 1
theme: lux
---

# Overview

This course is designed to demystify hierarchical modelling as powerful tools to model population dynamics, spatial distributions, and any non-linear relationships in your ecological data. The training will be divided into two blocks.

1.  First, we will cover hierarchies in biology, data, and in models to understand what hierarchical models are, some of the forms they can take, and the fundamentals of how they work.

2.  Second, we will introduce latent variable modelling as a way to explain even more of the variation in our response variables, to better disentangle the hierarchies of variation in our data.

Both blocks will include a theoretical presentation followed by hands-on coding exercises to implement and interpret hierarchical GAMs.

This workshop was developed with support from the [NSERC CREATE Computational Biodiversity Science and Services (BIOS²)](https://bios2.usherbrooke.ca/) training program.

## Learning outcomes

1.  Understand how a hierarchical model works, and how it can be used to capture nonlinear effects

2.  Understand dynamic modelling, and how latent variables can be used to capture dynamic processes like temporal or spatial autocorrelation

3.  Use the R packages `mgcv` and `mvgam` packages to build and fit hierarchical models

4.  Understand how to visualize and interpret hierarchical models with these packages

## Requirements

#### Familiarity with Generalized Additive Modelling

We recommend previous experience with GAMs before taking this training. If you would like to follow an introduction to GAMs before this workshop, please have a look at Eric Pedersen’s [Introduction to GAMs](https://bios2.usherbrooke.ca/2021/10/20/workshop-gams-2021/) and/or the Québec Centre for Biodiversity Science’s [Workshop 8: GAMs](http://r.qcbs.ca/workshop08/book-en/).

#### R & RStudio

The workshop assumes basic familiarity with R/RStudio. To be able to follow along with the practical exercises on your own computer, in addition to downloading the data files above, you will need to do the following:

Install the latest version of R for your operating system: <https://cran.r-project.org/>. Install the latest version of RStudio for your operating system: <https://www.rstudio.com/products/rstudio/download/>

#### R packages

Install and load the packages that we will use during the workshop by executing the following code in R version 4.2.0:

```{r, eval = T, message = FALSE}
# install packages from CRAN

# install.packages(pkgs = c("mvgam", "mgcv", "gratia", "marginaleffects", "ggplot2"), dependencies = TRUE)
library("dplyr")
library("tidyr")
library("mvgam")
library("mgcv")
library("gratia")
library("marginaleffects")
library("ggplot2")
```

### Stan

Please note that for Block 2, we will be fitting models using `Stan`. `Stan` must be installed (along with either `rstan` and/or `cmdstanr`). Please refer to installation links for `Stan` with `cmdstandr` [here](https://mc-stan.org/cmdstanr/) (or with `rstan` [here](https://mc-stan.org/users/interfaces/rstan)).

------------------------------------------------------------------------

# Workshop materials

## About the data set

In this workshop, we will be analyzing time series of a groundfish community in the Northwest Atlantic Newfoundland Shelf from 1980 to 2013. These data are published the article:

Pedersen Eric J., et al. (2017). Signatures of the collapse and incipient recovery of an overexploited marine ecosystem. *Proc. R. Soc. Open Sci.* 4170215. <http://doi.org/10.1098/rsos.170215>

For this workshop, we will work with a subset of 10 of the 30 species included in the article: *Anarhichas denticulatus, Gadus morhua, Glyptocephalus cynoglossus, Hippoglossoides platessoides, Raja spinicauda, Raja radiata, Raja senta, Reinhardtius hippoglossoides, Sebastes marinus, Sebastes mentella.*

### Data file setup and download

Load the prepared dataset:

```{r}
dat = readRDS(file = "data/fish-community.rds")
years = rownames(dat)
```

Plot the data to get a first look at how species' biomasses changed through time:

```{r}
matplot(dat, type="l", lty = 1, lwd = 2, col = rainbow(n = 10,v = .8),
        ylab = "Biomass", x = years)
```

------------------------------------------------------------------------

## Part 1: Hierarchical Generalized Additive Models (HGAMs)

### Prepare the data

First, the data needs to be prepared into a long format (i.e., one observation per row). Later (in Part 2), the `mvgam` package will require specific column names, so we will prepare the data to match the package's requirements.

```{r}
dat_l = dat |>
  
  # First, we need a "time" column to index the observations at each time step
  mutate("time" = as.numeric(years)) |> # make a new column with year values
  
  # Convert to long format
  pivot_longer(cols = -time, # only apply to species' biomass columns
               
               # Next, we need a "series" column that can be indexed to pick each time series
               # In this case, it is species names because we have 1 time series per species
               names_to = "series", # move species names into a "series" column
               
               # Finally, the response variable (what we measured) should be in
               # a "y" column
               values_to = "y") # move biomass values into a "y" column 

dat_l$series = factor(dat_l$series)
```

\[stuff\]

Finding the number of knots

```{r}
# let's start with 1 knot every 4 years
knots = ceiling(length(years)/4) 
npops = levels(dat_l$series) |> length()
kcheck_gam = mgcv::gam(y ~ s(time, bs = "tp", k = knots) + 
                           s(series, bs = 're'),
                       data = dat_l)
mgcv::gam.check(kcheck_gam)
```
