---
title: "Introduction to Hierarchical Generalized Additive Models"
description: |
  This course is designed to demystify hierarchical modelling as powerful tools to model population dynamics, spatial distributions, and any non-linear relationships in your ecological data. The training will be divided into two blocks. First, we will cover hierarchies in biology, data, and in models to understand what hierarchical models are, some of the forms they can take, and the fundamentals of how they work. Second, we will introduce latent variable modelling as a way to explain even more of the variation in our response variables, to better disentangle the hierarchies of variation in our data. Both blocks will include a theoretical presentation followed by hands-on coding exercises to implement and interpret hierarchical GAMs.
author:
  - name: "Camille Lévesque"
    affiliation: Université de Sherbrooke
  - name: "Katherine Hébert"
    affiliation: McGill University
categories: [Technical, EN]
date: "03-03-2025"
image: image.jpg
toc: true
number-sections: true
number-depth: 1
theme: lux
---

# Overview

This course is designed to demystify hierarchical modelling as powerful tools to model population dynamics, spatial distributions, and any non-linear relationships in your ecological data. The training will be divided into two blocks.

1.  First, we will cover hierarchies in biology, data, and in models to understand what hierarchical models are, some of the forms they can take, and the fundamentals of how they work.

2.  Second, we will introduce latent variable modelling as a way to explain even more of the variation in our response variables, to better disentangle the hierarchies of variation in our data.

Both blocks will include a theoretical presentation followed by hands-on coding exercises to implement and interpret hierarchical GAMs.

This workshop was developed with support from the [NSERC CREATE Computational Biodiversity Science and Services (BIOS²)](https://bios2.usherbrooke.ca/) training program.

## Credits

This workshop is based on Nicholas J. Clark's Physalia course "Ecological forecasting with `mvgam` and `brms`". It was reworked by Katherine Hébert and Camille Lévesque into this short tutorial (mainly in Part 2), but we recommend having a look at the original for a more in-depth look at the methods we are covering today:

> Clark, N. J. (2024). "Ecological forecasting with `mvgam` and `brms`". Physalia. Retrieved from <https://nicholasjclark.github.io/physalia-forecasting-course/>.

## Learning outcomes

1.  Understand how a hierarchical model works, and how it can be used to capture nonlinear effects

2.  Understand dynamic modelling, and how latent variables can be used to capture dynamic processes like temporal or spatial autocorrelation

3.  Use the R packages `mgcv` and `mvgam` packages to build and fit hierarchical models

4.  Understand how to visualize and interpret hierarchical models with these packages

## Requirements

#### Familiarity with Generalized Additive Modelling

We recommend previous experience with GAMs before taking this training. If you would like to follow an introduction to GAMs before this workshop, please have a look at Eric Pedersen’s [Introduction to GAMs](https://bios2.usherbrooke.ca/2021/10/20/workshop-gams-2021/) and/or the Québec Centre for Biodiversity Science’s [Workshop 8: GAMs](http://r.qcbs.ca/workshop08/book-en/).

#### R & RStudio

The workshop assumes basic familiarity with R/RStudio. To be able to follow along with the practical exercises on your own computer, in addition to downloading the data files above, you will need to do the following:

Install the latest version of R for your operating system: <https://cran.r-project.org/>. Install the latest version of RStudio for your operating system: <https://www.rstudio.com/products/rstudio/download/>

#### R packages

Install and load the packages that we will use during the workshop by executing the following code in R version 4.2.0:

```{r, eval = T, message = FALSE}
# install packages from CRAN

# install.packages(pkgs = c("mvgam", "mgcv", "gratia", "marginaleffects", "ggplot2"), dependencies = TRUE)
library("dplyr")
library("tidyr")
library("mvgam")
library("mgcv")
library("gratia")
library("marginaleffects")
library("ggplot2")

# set all ggplots to this theme
theme_set(theme_minimal())
```

### Stan

Please note that for Block 2, we will be fitting models using `Stan`. `Stan` must be installed (along with either `rstan` and/or `cmdstanr`). Please refer to installation links for `Stan` with `cmdstandr` [here](https://mc-stan.org/cmdstanr/) (or with `rstan` [here](https://mc-stan.org/users/interfaces/rstan)).

------------------------------------------------------------------------

# Workshop materials

## About the data set

In this workshop, we will be analyzing time series of plankton counts (cells per mL) taken from Lake Washington in Washington, USA during a long-term monitoring study. The data are available in the `MARSS` package.

[![](https://upload.wikimedia.org/wikipedia/commons/e/ec/Lake_Washington_region.png){fig-align="center"}](https://www.google.com/url?sa=i&url=https%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FFile%3ALake_Washington_region.png&psig=AOvVaw3-T1CwR0iIWfiMD1B0WiFK&ust=1740498251184000&source=images&cd=vfe&opi=89978449&ved=0CBQQjRxqFwoTCKjh87LT3IsDFQAAAAAdAAAAABAJ)

The data download and preparation steps are identical to the [steps in Nicholas J. Clark's Physalia course](https://nicholasjclark.github.io/physalia-forecasting-course/day4/tutorial_4_physalia#Lake_Washington_plankton_data).

### Data download

Load the dataset:

```{r}
load(url('https://github.com/atsa-es/MARSS/raw/master/data/lakeWAplankton.rda'))
```

### Prepare the data

First, the data needs to be prepared into a long format (i.e., one observation per row). In Part 2, the `mvgam` package will require specific column names, so we will prepare the data to match the package's requirements.

```{r}
## Prepare the time series data for analysis 

# This code is from https://nicholasjclark.github.io/physalia-forecasting-course/day4/tutorial_4_physalia

# We will work with five different groups of plankton:
outcomes <- c('Greens', 'Bluegreens', 'Diatoms', 'Unicells', 'Other.algae')

plankton_data <- xfun::cache_rds(do.call(rbind, lapply(outcomes, function(x){
  
  # create a group-specific dataframe with counts labelled 'y'
  # and the group name in the 'series' variable
  data.frame(year = lakeWAplanktonTrans[, 'Year'],
             month = lakeWAplanktonTrans[, 'Month'],
             y = lakeWAplanktonTrans[, x],
             series = x,
             temp = lakeWAplanktonTrans[, 'Temp'])})) %>%
  
  # change the 'series' label to a factor
  dplyr::mutate(series = factor(series)) %>%
  
  # filter to only include some years in the data
  dplyr::filter(year >= 1965 & year < 1975) %>%
  dplyr::arrange(year, month) %>%
  dplyr::group_by(series) %>%
  
  # z-score the counts so they are approximately standard normal
  dplyr::mutate(y = as.vector(scale(y))) %>%
  
  # add the time indicator
  dplyr::mutate(time = dplyr::row_number()) %>%
  dplyr::ungroup())

# loop across each plankton group to create the long datframe
plankton_data <- do.call(rbind, lapply(outcomes, function(x){
  
  # create a group-specific dataframe with counts labelled 'y'
  # and the group name in the 'series' variable
  data.frame(year = lakeWAplanktonTrans[, 'Year'],
             month = lakeWAplanktonTrans[, 'Month'],
             y = lakeWAplanktonTrans[, x],
             series = x,
             temp = lakeWAplanktonTrans[, 'Temp'])})) %>%
  
  # change the 'series' label to a factor
  dplyr::mutate(series = factor(series)) %>%
  
  # filter to only include some years in the data
  dplyr::filter(year >= 1965 & year < 1975) %>%
  dplyr::arrange(year, month) %>%
  dplyr::group_by(series) %>%
  
  # z-score the counts so they are approximately standard normal
  dplyr::mutate(y = as.vector(scale(y))) %>%
  
  # add the time index
  dplyr::mutate(time = dplyr::row_number()) %>%
  dplyr::ungroup()
```

```{r, echo = F}
saveRDS(plankton_data, here::here("saved-objects/plankton-data.rds"))
```

Let's have a look at the data's structure:

```{r}
head(plankton_data)
```

Let's also plot the data to get a first look at the time series:

```{r}
ggplot(data = plankton_data, aes(x = time)) +
  geom_line(aes(y = temp), col = "black") + # Temperature in black
  geom_line(aes(y = y, col = series), lwd = .4) + # Taxa counts in color
  labs(x = "Time", y = "Abundance (z-score)\n(Temperature z-score in black)", col = "Group")
```

------------------------------------------------------------------------

## Part 1: Hierarchical Generalized Additive Models (HGAMs)

Diatoms data set. *I want to illustrate nonlinearity for juste one series.
```{r}
# subset
diatoms_data <- plankton_data[plankton_data$series == "Diatoms", ]
```

Data points.
```{r}
ggplot(diatoms_data, aes(x = time, y = y)) +
  geom_point() +
  geom_line(aes(y = y), lwd = .4) +
  labs(title = "Diatoms Data Points", x = "Year", y = "Y Value") +
  theme_minimal()
```
Linear model
```{r}
diatoms_lm <- lm(y ~ time, data = diatoms_data)


ggplot(diatoms_data, aes(x = time, y = y)) +
  geom_point(color = "black") +  # Scatter points
  geom_smooth(method = "lm", color = "blue1", fill = "lightgray", se = TRUE) +  # Regression line
  labs(title = "Diatoms Data with Linear Regression Line",
       x = "Time",
       y = "Y Value") +
  theme_minimal()
```

GAM
```{r}
# model
diatoms_gam <- gam(y ~ s(time, bs = "cs", k = 50), data = diatoms_data)

# graph
gratia::draw(diatoms_gam)

```

```{r}
# Create a sequence of values for time to get predictions
time_seq <- data.frame(time = seq(min(diatoms_data$time), max(diatoms_data$time), length.out = 100))

# Get predictions from the GAM model
time_seq$predicted_y <- predict(diatoms_gam, newdata = time_seq)

# Create the scatter plot with the GAM smooth line
ggplot(diatoms_data, aes(x = time, y = y)) +
  geom_point(color = "black") +  # Scatter points
  geom_line(data = time_seq, aes(x = time, y = predicted_y), color = "orange") +  # GAM smooth line
  labs(title = "Diatoms Data with GAM Smooth Line",
       x = "Time",
       y = "Y Value") +
  theme_minimal()



```

